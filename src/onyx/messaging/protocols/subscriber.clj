(ns onyx.messaging.protocols.subscriber
  (:refer-clojure :exclude [key]))

(defprotocol Subscriber
  (info [this])
  (equiv-meta [this sub-info])
  (key [this])
  (start [this])
  (stop [this])
  (prepare-poll! [this])
  (poll-messages! [this])
  (poll-replica! [this])
  (set-replica-version! [this new-replica-version])
  (set-epoch! [this new-epoch])
  (get-recover [this])
  (offer-ready-reply! [this])
  (completed? [this])
  (unblock! [this])
  (block! [this])
  (blocked? [this])
  (alive? [this])
  (recovered? [this])
  (set-recover! [this recover*])
  (set-recovered! [this])
  (set-heartbeat! [this])
  (get-heartbeat [this])
  (set-ready! [this sess-id])
  (add-assembler [this])
  (get-session-id [this])
  (offer-heartbeat! [this])
  (offer-barrier-aligned! [this])
  (poll-heartbeats! [this]))
